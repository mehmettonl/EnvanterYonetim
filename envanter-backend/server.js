const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
require("dotenv").config();  // Ã‡evresel deÄŸiÅŸkenler iÃ§in .env dosyasÄ±nÄ± yÃ¼kle

const app = express();
app.use(express.json()); // JSON verisi ile Ã§alÄ±ÅŸacaÄŸÄ±mÄ±z iÃ§in
app.use(cors());  // CORS izinlerini aÃ§

// MongoDB BaÄŸlantÄ±sÄ±
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log("MongoDB baÄŸlantÄ±sÄ± baÅŸarÄ±lÄ±"))
.catch((err) => console.error("MongoDB baÄŸlantÄ± hatasÄ±:", err));

// --- Raf Schema ---
// Raf kodlarÄ± ve kapasite bilgisi iÃ§in
const RafSchema = new mongoose.Schema({
  kod: String,           // Ã–rn: "1A"
  kapasite: Number,      // Ã–rn: 100
  kalan: Number          // BaÅŸlangÄ±Ã§ta kapasiteyle aynÄ±
});

// --- Envanter Schema ---
// Envanterin tÃ¼m Ã¶zellikleri
const EnvanterSchema = new mongoose.Schema({
  ad: String,
  numara: String,
  toplamRaf: Number,
  raflar: [RafSchema]     // Raflar burada tanÄ±mlandÄ±
});

const Envanter = mongoose.model("Envanter", EnvanterSchema);

// ğŸ”§ Raf kodu Ã¼retme fonksiyonu
const generateRafKodlari = (adet, harfler = ['A', 'B', 'C', 'D']) => {
  const kodlar = [];
  for (let i = 1; i <= adet; i++) {
    harfler.forEach(harf => kodlar.push(`${i}${harf}`)); // 1A, 1B, 2A, 2B vs.
  }
  return kodlar;
};

// âœ… Yeni envanter ekleme
app.post("/envanter-ekle", async (req, res) => {
  try {
    const { ad, numara, toplamRaf } = req.body;

    const rafKodlari = generateRafKodlari(toplamRaf); // 1A, 1B, 1C...
    const raflar = rafKodlari.map(kod => ({
      kod,
      kapasite: 100,
      kalan: 100,  // BaÅŸlangÄ±Ã§ta her rafÄ±n kapasitesi 100
    }));

    const yeniEnvanter = new Envanter({
      ad,
      numara,
      toplamRaf,
      raflar,
    });

    await yeniEnvanter.save();
    res.status(201).json({
      message: "Envanter baÅŸarÄ±yla eklendi",
      yeniEnvanter,
    });
  } catch (error) {
    console.error("Ekleme hatasÄ±:", error);
    res.status(500).json({ error: "Bir hata oluÅŸtu" });
  }
});

// TÃ¼m envanterleri getirme endpoint'i
app.get("/envanterler", async (req, res) => {
  try {
    const envanterler = await Envanter.find().lean(); // VeritabanÄ±ndan envanterleri al
    res.json(envanterler);
  } catch (error) {
    res.status(500).json({ error: "Bir hata oluÅŸtu" });
  }
});

// Envanter GÃ¼ncelleme
app.put("/envanter-guncelle/:id", async (req, res) => {
  try {
    const { ad, numara, toplamRaf } = req.body;
    const updatedEnvanter = await Envanter.findByIdAndUpdate(
      req.params.id,
      { ad, numara, toplamRaf },
      { new: true }
    );
    if (!updatedEnvanter) {
      return res.status(404).json({ error: "Envanter bulunamadÄ±" });
    }
    res.json({ message: "GÃ¼ncellendi", updatedEnvanter });
  } catch (error) {
    res.status(500).json({ error: "Bir hata oluÅŸtu" });
  }
});

// Envanter Silme
app.delete("/envanter-sil/:id", async (req, res) => {
  try {
    await Envanter.findByIdAndDelete(req.params.id);
    res.json({ message: "Silindi" });
  } catch (error) {
    res.status(500).json({ error: "Silme hatasÄ± oluÅŸtu" });
  }
});

// ÃœrÃ¼n Ekleme
app.put("/urun-ekle", async (req, res) => {
  try {
    const { envanterId, rafKod, miktar } = req.body;
    
    // Envanteri bul
    const envanter = await Envanter.findById(envanterId);
    if (!envanter) {
      return res.status(404).json({ error: "Envanter bulunamadÄ±" });
    }

    // RafÄ± bul
    const raf = envanter.raflar.find(r => r.kod === rafKod);
    if (!raf) {
      return res.status(404).json({ error: "Raf bulunamadÄ±" });
    }

    // Yeterli boÅŸ alan var mÄ± kontrol et
    if (raf.kalan < miktar) {
      return res.status(400).json({ error: "Yeterli boÅŸ alan yok" });
    }

    // Raf kapasitesini gÃ¼ncelle
    raf.kalan -= miktar;

    await envanter.save();
    res.json({ message: `${miktar} Ã¼rÃ¼n eklenmiÅŸ ve raf kapasitesi gÃ¼ncellenmiÅŸtir.` });
  } catch (error) {
    console.error("ÃœrÃ¼n ekleme hatasÄ±:", error);
    res.status(500).json({ error: "Sunucu hatasÄ± oluÅŸtu" });
  }
});

// Portu belirle
const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});